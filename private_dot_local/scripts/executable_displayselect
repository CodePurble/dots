#!/usr/bin/env bash

# Ref: https://github.com/LukeSmithxyz/voidrice/blob/master/.local/bin/displayselect
# Luke Smith is great!!

# A UI for detecting and selecting all displays. Probes xrandr for connected
# displays and lets user select one to use. User may also select "manual
# selection" which opens arandr.

# My additions-
# I use separate bspwmrc's for different monitor setups, so I have a script that chooses between
# the two (bspconfig)
# Also, when using single monitor setups, I put all workspaces on the selected monitor

# My changes are a bit wonky though
# If the workspaces do not get assigned properly after running this script,
# just manually reload bspwm

rofi_command="rofi -theme $HOME/.config/rofi-themes/powermenu.rasi"

setSingleMon() {
    echo $1
    if [[ "$1" == "eDP-1" ]] || [[ "$1" == "eDP-1-1" ]]; then
        find="HDMI-0"
    else
        find="eDP-1\(-1\)\{0,1\}" # Equivalent to eDP-1(-1)?
    fi
    sed -i -e "/mainmonitor/s/$find/$1/" $HOME/.config/bspwm/bspwmrc.single
    bspconfig single
}

twoscreen() { # If multi-monitor is selected and there are two screens.
    mirror=$(printf "no\\nyes" | $rofi_command -dmenu -i -p "Mirror displays?")
    # Mirror displays using native resolution of external display and a scaled
    # version for the internal display
    if [ "$mirror" = "yes" ]; then
        external=$(echo "$screens" | $rofi_command -dmenu -i -p "Optimize resolution for:")
        internal=$(echo "$screens" | grep -v "$external")
        res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | \
            tail -n 1 | awk '{print $1}')
        res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | \
            tail -n 1 | awk '{print $1}')
        res_ext_x=$(echo "$res_external" | sed 's/x.*//')
        res_ext_y=$(echo "$res_external" | sed 's/.*x//')
        res_int_x=$(echo "$res_internal" | sed 's/x.*//')
        res_int_y=$(echo "$res_internal" | sed 's/.*x//')
        scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
        scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)
        xrandr --output "$external" --auto --scale 1.0x1.0 \
            --output "$internal" --auto --same-as "$external" \
            --scale "$scale_x"x"$scale_y"
        # setSingleMon $external
    else
        primary=$(echo "$screens" | $rofi_command -dmenu -i -p "Select primary display:")
        secondary=$(echo "$screens" | grep -v "$primary")
        direction=$(printf "left\\nright" | $rofi_command -dmenu -i -p "What side of $primary should $secondary be on?")
        xrandr --output "$primary" --auto --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
        bspconfig multi
    fi
}

morescreen() { # If multi-monitor is selected and there are more than two screens.
    primary=$(echo "$screens" | $rofi_command -dmenu -i -p "Select primary display:")
    secondary=$(echo "$screens" | grep -v "$primary" | $rofi_command -dmenu -i -p "Select secondary display:")
    direction=$(printf "left\\nright" | $rofi_command -dmenu -i -p "What side of $primary should $secondary be on?")
    tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | $rofi_command -dmenu -i -p "Select third display:")
    xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
}

multimon() { # Multi-monitor handler.
    case "$(echo "$screens" | wc -l)" in
        2) twoscreen ;;
        *) morescreen ;;
    esac
}

onescreen() { # If only one output available or chosen.
    xrandr --output "$1" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ')
    # setSingleMon "$1"
}

postrun() { # Stuff to run to clean up.
    { killall dunst ; setsid -f dunst ;} >/dev/null 2>&1 # Restart dunst to ensure proper location on screen
    if [[ "$MYWM" == "herbstluftwm" ]]; then
        herbstclient reload # Reload herbstluftwm
    else
        bspc wm -r # Reload bspwm
    fi
}

# Get all possible displays
allposs=$(xrandr -q | grep "connected")

# Get all connected screens.
screens=$(echo "$allposs" | awk '/ connected/ {print $1}')

# If there's only one screen
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
    { onescreen "$screens"; postrun; notify-send "ðŸ’» Only one screen detected." "Using it in its optimal settings...";  exit ;}

# Get user choice including multi-monitor and manual selection:
chosen=$(printf "%s\\nmulti-monitor\\nmanual selection" "$screens" | $rofi_command -dmenu -i -p "Select display arangement:") &&
case "$chosen" in
    "manual selection") arandr ; exit ;;
    "multi-monitor") multimon ;;
    *) onescreen "$chosen" ;;
esac

postrun
