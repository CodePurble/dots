# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: alacritty

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  # columns: 0
  # lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 4
    y: 4

  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #   - full: Borders and title bar
  #   - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #   - transparent: Title bar, transparent background and title bar buttons
  #   - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: none

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  # - Windowed
  # - Maximized
  # - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  # - SimpleFullscreen
  #startup_mode: Windowed

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
  # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  #scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 5000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 1

font:
  # normal:
  #   family: FiraCode Nerd Font Mono
  #   style: Regular
  #
  # bold:
  #   family: FiraCode Nerd Font Mono
  #   style: Bold
  #
  # italic:
  #   family: FiraCode Nerd Font Mono
  #   style: Italic
  #
  # bold_italic:
  #   family: FiraCode Nerd Font Mono
  #   style: Bold Italic

  normal:
    family: JetBrainsMono Nerd Font Mono
    style: Regular

  bold:
    family: JetBrainsMono  Nerd Font Mono
    style: Bold

  italic:
    family: JetBrainsMono Nerd Font Mono
    style: Italic

  bold_italic:
    family: JetBrainsMono Nerd Font Mono
    style: Bold Italic

  # Point size
  size: 9.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  # offset:
  #   x: 0
  #   y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

schemes:
  # RP-ZSH
  # Author: C. Ramprakash
  # solarized-dark with a lot of changes
  rp-zsh: &rp-zsh
    # Default colors
    primary:
      background: '#001627'
      foreground: '#888a85'
    # Normal colors
    normal:
      black:   '#002b36'
      red:   '#cc2e2c'
      green:   '#0DAB15'
      yellow:  '#b48800'
      blue:  '#2179b7'
      magenta: '#6064ae'
      cyan:  '#496b84'
      white:   '#93a1a1'
    # Bright colors
    bright:
      black:   '#657b83'
      red:   '#dc322f'
      green:   '#0da135'
      yellow:  '#D09E00'
      blue:  '#268bd2'
      magenta: '#6c71c4'
      cyan:  '#5c8cae'
      white:   '#fdf6e3'

  # (One Dark - https://github.com/atom/atom/tree/master/packages/one-dark-syntax)
  # (One Dark - https://github.com/monsonjeremy/onedark.nvim/blob/master/extras/alacritty_onedark_.yml)
  one-dark: &one-dark
    # Default colors
    primary:
      background: '#282c34'
      foreground: '#abb2bf'
    # Selection colors
    # selection:
    #   text:       CellForeground
    #   background: '0x393f4a'
    # Normal colors
    normal:
      black:   '#20232A'
      red:     '#e86671'
      green:   '#98c379'
      yellow:  '#e0af68'
      blue:    '#61afef'
      magenta: '#c678dd'
      cyan:    '#56b6c2'
      white:   '#798294'
    # Bright colors
    bright:
      black:   '#21252b'
      red:     '#e86671'
      green:   '#98c379'
      yellow:  '#e0af68'
      blue:    '#61afef'
      magenta: '#c678dd'
      cyan:    '#56b6c2'
      white:   '#abb2bf'
    indexed_colors:
      - { index: 16, color: '0xd19a66' }
      - { index: 17, color: '0xf65866' }

  pop-os: &pop-os
    # Default colors
    primary:
      background: '#333333'
      foreground: '#F2F2F2'
    # Normal colors
    normal:
      black:   '#333333'
      red:   '#CC0000'
      green:   '#4E9A06'
      yellow:  '#C4A000'
      blue:  '#3465A4'
      magenta: '#75507B'
      cyan:  '#06989A'
      white:   '#D3D7CF'
    # Bright colors
    bright:
      black:   '#88807C'
      red:   '#F15D22'
      green:   '#73C48F'
      yellow:  '#FFCE51'
      blue:  '#48B9C7'
      magenta: '#AD7FA8'
      cyan:  '#34E2E2'
      white:   '#EEEEEC'

  material: &material
  # Colors (Material Theme)
    # Default colors
    primary:
      background: '#263238'
      foreground: '#eeffff'
    # Normal colors
    normal:
      black:   '#000000'  # Arbitrary
      red:     '#e53935'
      green:   '#91b859'
      yellow:  '#ffb62c'
      blue:    '#6182b8'
      magenta: '#ff5370'  # Dark pink of the original material theme
      cyan:    '#39adb5'
      white:   '#a0a0a0'  # Arbitrary
    # Bright colors
    bright:
      black:   '#4e4e4e'  # Arbitrary
      red:     '#ff5370'
      green:   '#c3e88d'
      yellow:  '#ffcb6b'
      blue:    '#82aaff'
      magenta: '#f07178'  # Pink of the original material theme
      cyan:    '#89ddff'
      white:   '#ffffff'  # Arbitrary

colors: *one-dark


# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
window:
  opacity: 0.80

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
window.dynamic_title: true

cursor:
  unfocused_hollow: true
  vi_mode_style: Block

live_config_reload: true

mouse:
  hide_when_typing: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#  - A-Z
#  - F1-F24
#  - Key0-Key9
#
#  A full list with available key codes can be found here:
#  https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#  Instead of using the name of the keys, the `key` field also supports using
#  the scancode of the desired key. Scancodes have to be specified as a
#  decimal number. This command will allow you to display the hex scancodes
#  for certain keys:
#
#   `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#  The `chars` field writes the specified string to the terminal. This makes
#  it possible to pass escape sequences. To find escape codes for bindings
#  like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#  of tmux. Note that applications use terminfo to map escape sequences back
#  to keys. It is therefore required to update the terminfo when changing an
#  escape sequence.
#
# - `action`: Execute a predefined action
#
# - Copy
# - Paste
# - PasteSelection
# - IncreaseFontSize
# - DecreaseFontSize
# - ResetFontSize
# - ScrollPageUp
# - ScrollPageDown
# - ScrollLineUp
# - ScrollLineDown
# - ScrollToTop
# - ScrollToBottom
# - ClearHistory
# - Hide
# - Minimize
# - Quit
# - ToggleFullscreen
# - SpawnNewInstance
# - ClearLogNotice
# - ReceiveChar
# - None
#
# (macOS only):
# - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#  The `command` field must be a map containing a `program` string and an
#  `args` array of command line parameter strings. For example:
#   `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#  - Command
#  - Control
#  - Option
#  - Super
#  - Shift
#  - Alt
#
#  Multiple `mods` can be combined using `|` like this:
#   `mods: Control|Shift`.
#  Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#  This is mainly used to send applications the correct escape sequences
#  when in different modes.
#
#  - AppCursor
#  - AppKeypad
#  - Alt
#
#  A `~` operator can be used before a mode to apply the binding whenever
#  the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # Vi Mode
  - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom      }
  - { key: Space,  mods: Shift|Control,     action: ToggleViMode      }
  - { key: Escape,            mode: Vi, action: ClearSelection      }
  - { key: I,               mode: Vi, action: ScrollToBottom      }
  - { key: I,               mode: Vi, action: ToggleViMode      }
  - { key: C,    mods: Control,     mode: Vi, action: ToggleViMode      }
  - { key: Y,    mods: Control,     mode: Vi, action: ScrollLineUp      }
  - { key: E,    mods: Control,     mode: Vi, action: ScrollLineDown      }
  - { key: G,               mode: Vi, action: ScrollToTop       }
  - { key: G,    mods: Shift,     mode: Vi, action: ScrollToBottom      }
  - { key: B,    mods: Control,     mode: Vi, action: ScrollPageUp      }
  - { key: F,    mods: Control,     mode: Vi, action: ScrollPageDown      }
  - { key: U,    mods: Control,     mode: Vi, action: ScrollHalfPageUp    }
  - { key: D,    mods: Control,     mode: Vi, action: ScrollHalfPageDown    }
  - { key: Y,               mode: Vi, action: Copy          }
  - { key: Y,               mode: Vi, action: ClearSelection      }
  - { key: Copy,              mode: Vi, action: ClearSelection      }
  - { key: V,               mode: Vi, action: ToggleNormalSelection }
  - { key: V,    mods: Shift,     mode: Vi, action: ToggleLineSelection   }
  - { key: V,    mods: Control,     mode: Vi, action: ToggleBlockSelection  }
  - { key: V,    mods: Alt,       mode: Vi, action: ToggleSemanticSelection }
  - { key: Return,            mode: Vi, action: Open          }
  - { key: K,               mode: Vi, action: Up            }
  - { key: J,               mode: Vi, action: Down          }
  - { key: H,               mode: Vi, action: Left          }
  - { key: L,               mode: Vi, action: Right         }
  - { key: Up,              mode: Vi, action: Up            }
  - { key: Down,              mode: Vi, action: Down          }
  - { key: Left,              mode: Vi, action: Left          }
  - { key: Right,             mode: Vi, action: Right         }
  - { key: Key0,              mode: Vi, action: First         }
  - { key: Key4,   mods: Shift,     mode: Vi, action: Last          }
  - { key: Key6,   mods: Shift,     mode: Vi, action: FirstOccupied     }
  - { key: H,    mods: Shift,     mode: Vi, action: High          }
  - { key: M,    mods: Shift,     mode: Vi, action: Middle          }
  - { key: L,    mods: Shift,     mode: Vi, action: Low           }
  - { key: B,               mode: Vi, action: SemanticLeft      }
  - { key: W,               mode: Vi, action: SemanticRight     }
  - { key: E,               mode: Vi, action: SemanticRightEnd    }
  - { key: B,    mods: Shift,     mode: Vi, action: WordLeft        }
  - { key: W,    mods: Shift,     mode: Vi, action: WordRight       }
  - { key: E,    mods: Shift,     mode: Vi, action: WordRightEnd      }
  - { key: Key5,   mods: Shift,     mode: Vi, action: Bracket         }
  - { key: Slash,             mode: Vi, action: SearchForward     }
  - { key: Slash,  mods: Shift,     mode: Vi, action: SearchBackward      }
  - { key: N,               mode: Vi, action: SearchNext        }
  - { key: N,    mods: Shift,     mode: Vi, action: SearchPrevious      }

  # General
  - { key: V,        mods: Control|Shift, action: Paste        }
  - { key: C,        mods: Control|Shift, action: Copy         }
  - { key: Key0,       mods: Control    , action: ResetFontSize    }
  - { key: Numpad0,    mods: Control    , action: ResetFontSize    }
  - { key: Equals,     mods: Control    , action: IncreaseFontSize }
  - { key: NumpadAdd,    mods: Control    , action: IncreaseFontSize }
  - { key: Minus,      mods: Control    , action: DecreaseFontSize }
  - { key: NumpadSubtract, mods: Control    , action: DecreaseFontSize }
  - { key: Return,     mods: Control|Shift, action: SpawnNewInstance }
  - { key: Up,       mods: Control    , action: ScrollPageUp     }
  - { key: Down,       mods: Control    , action: ScrollPageDown   }

